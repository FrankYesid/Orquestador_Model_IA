version: '3.8'

# ============================================================================
# Docker Compose para Apache Airflow - Pipeline ETL
# ============================================================================
# Este archivo configura todos los servicios necesarios para ejecutar Airflow
# en contenedores Docker.
#
# Servicios incluidos:
# - postgres: Base de datos para metadatos de Airflow
# - redis: Message broker para CeleryExecutor (opcional)
# - airflow-webserver: Interfaz web de Airflow
# - airflow-scheduler: Programador de tareas
# - airflow-worker: Ejecutor de tareas (para CeleryExecutor)
# - airflow-init: Inicialización de la base de datos
# ============================================================================

x-airflow-common:
  &airflow-common
  # Usar imagen personalizada o imagen oficial
  # build: .
  image: apache/airflow:2.8.1-python3.11
  environment:
    &airflow-common-env
    # Configuración básica de Airflow
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    
    # Configuración de logging
    AIRFLOW__LOGGING__LOGGING_LEVEL: INFO
    AIRFLOW__LOGGING__FAB_LOGGING_LEVEL: WARN
    
    # Configuración del scheduler
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 30
    
    # Configuración del webserver
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'true'
    AIRFLOW__WEBSERVER__RBAC: 'true'
    
    # Variables de entorno del proyecto
    PYTHONPATH: /opt/airflow
    PROJECT_ROOT: /opt/airflow
    DATA_INPUT_PATH: /opt/airflow/data/input
    DATA_OUTPUT_PATH: /opt/airflow/data/output
    DB_PATH: /opt/airflow/data/database.db
    
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/scripts:/opt/airflow/scripts
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/data:/opt/airflow/data
    - ${AIRFLOW_PROJ_DIR:-.}/.env:/opt/airflow/.env
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy

services:
  # ==========================================================================
  # PostgreSQL - Base de datos para metadatos de Airflow
  # ==========================================================================
  postgres:
    image: postgres:14
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - airflow-network

  # ==========================================================================
  # Airflow Webserver - Interfaz web
  # ==========================================================================
  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # ==========================================================================
  # Airflow Scheduler - Programador de tareas
  # ==========================================================================
  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow-network

  # ==========================================================================
  # Airflow Init - Inicialización de la base de datos
  # ==========================================================================
  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/data/input /opt/airflow/data/output
        chown -R "${AIRFLOW_UID:-50000}:0" /opt/airflow/{logs,dags,plugins,data}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - airflow-network

  # ==========================================================================
  # Airflow CLI - Herramienta de línea de comandos (opcional)
  # ==========================================================================
  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    networks:
      - airflow-network

# ============================================================================
# Volúmenes persistentes
# ============================================================================
volumes:
  postgres-db-volume:
    driver: local
    name: airflow-postgres-db

# ============================================================================
# Redes
# ============================================================================
networks:
  airflow-network:
    driver: bridge
    name: airflow-network
